//////////////////////////////
// Buildscript Dependencies //
//////////////////////////////
buildscript {
    repositories {
        jcenter()
        maven { url 'https://palantir.bintray.com/releases/' }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-info-plugin:7.1.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:17.2.1'
    }
}

/////////////
// Plugins //
/////////////
plugins {
    id 'com.palantir.git-version' version '0.12.3'
    id 'org.inferred.processors' version '3.3.0'
}

apply plugin: 'java'
apply plugin: 'idea'

// intentionally not applying nebula.maven-publish, but most of its constituent
// plugins, because we do _not_ want nebula.maven-compile-only
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'nebula.maven-nebula-publish'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-developer'
apply plugin: 'nebula.maven-manifest'
apply plugin: 'nebula.info-scm'
apply plugin: 'nebula.maven-scm'
apply plugin: 'nebula.source-jar'

/////////////////////////
// Module Dependencies //
/////////////////////////
repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'
}

// keep group/version info the same as from before
group 'com.palantir.patches.sourceforge'
version gitVersion()

///////////////////////////////////////////////////

def outputDir = 'output'
def outputGeneratorClasses = "${outputDir}/generator_classes"
def outputGenerated = "${outputDir}/gen_src"
def outputDest = "${outputDir}/classes"
def outputTests = "${outputDir}/test_classes"
def outputLib = "${outputDir}/lib"
def distRoot = "${outputDir}/dist"

def templates = "templates"
def generatorSrc = "generator_src"

////////////////////////
// Generating sources //
////////////////////////
task generate(type: JavaExec, dependsOn: ':buildGenerator') {
    classpath = files(outputGeneratorClasses)
    main = 'gnu.trove.generator.Generator'
    args templates, outputGenerated
}

task buildGenerator(type: JavaCompile) {
    classpath = files(generatorSrc)
    source = generatorSrc
    destinationDirectory = file(outputGeneratorClasses)
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// add generated sources to classpath for compilation
sourceSets.main.java.srcDirs += outputGenerated

// setup intellij to work with generated files
idea {
    module {
        // need to make sure generated source is a source dir first
        // before marking it as a generated source dir.
        sourceDirs += [file(generatorSrc), file(outputGenerated)]
        generatedSourceDirs += file(outputGenerated)
    }
}

clean.doFirst {
    delete outputDir
}

////////////////
// Publishing //
////////////////
bintray {
    user = System.env.BINTRAY_USERNAME
    key = System.env.BINTRAY_PASSWORD
    publish = true
    pkg {
        repo = 'releases'
        name = 'trove'
        userOrg = 'palantir'
        licenses = ['Apache-2.0']
        publications = ['nebula']
    }
}

publish.dependsOn bintrayUpload
bintrayUpload.onlyIf {
    versionDetails().isCleanTag
}

// see: https://docs.gradle.org/5.2/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
// this replaces nebula.maven-resolved-dependencies, which doesn't work with the 'com.gradle.plugin-publish' plugin
publishing {
    publications.withType(MavenPublication).configureEach {
        versionMapping {
            allVariants {
                fromResolutionResult()
            }
        }
    }
}

// turning off module metadata so that all consumers just use regular POMs
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

///////////////////////
// Task Dependencies //
///////////////////////
tasks.idea.dependsOn generate
tasks.compileJava.dependsOn generate
