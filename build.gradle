buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:0.4.10'
    }
}
/////////////
// Plugins //
/////////////
plugins {
    id 'com.palantir.git-version' version '0.12.3'
    id 'org.inferred.processors' version '3.3.0'
    id 'com.palantir.external-publish' version '1.2.1'
    id 'com.palantir.external-publish-jar' version '1.2.1'

    id 'java'
    id 'idea'
}

/////////////////////////
// Module Dependencies //
/////////////////////////
repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
}

// keep group/version info the same as from before
group 'com.palantir.patches.sourceforge'
version gitVersion()

///////////////////////////////////////////////////

def outputDir = 'output'
def outputGeneratorClasses = "${outputDir}/generator_classes"
def outputGenerated = "${outputDir}/gen_src"
def outputDest = "${outputDir}/classes"
def outputTests = "${outputDir}/test_classes"
def outputLib = "${outputDir}/lib"
def distRoot = "${outputDir}/dist"

def templates = "templates"
def generatorSrc = "generator_src"

////////////////////////
// Generating sources //
////////////////////////
task generate(type: JavaExec, dependsOn: ':buildGenerator') {
    classpath = files(outputGeneratorClasses)
    main = 'gnu.trove.generator.Generator'
    args templates, outputGenerated
}

task buildGenerator(type: JavaCompile) {
    classpath = files(generatorSrc)
    source = generatorSrc
    destinationDirectory = file(outputGeneratorClasses)
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// add generated sources to classpath for compilation
sourceSets.main.java.srcDirs += outputGenerated

// setup intellij to work with generated files
idea {
    module {
        // need to make sure generated source is a source dir first
        // before marking it as a generated source dir.
        sourceDirs += [file(generatorSrc), file(outputGenerated)]
        generatedSourceDirs += file(outputGenerated)
    }
}

///////////
// Tasks //
///////////
clean.doFirst {
    delete outputDir
}

// turning off module metadata so that all consumers just use regular POMs
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

// turning off javadocs task because there are too many errors
tasks.withType(Javadoc) {
    enabled = false
}

tasks.idea.dependsOn generate
tasks.compileJava.dependsOn generate
